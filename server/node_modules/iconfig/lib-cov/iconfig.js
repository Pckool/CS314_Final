/* ****** automatically generated by jscover - do not edit ******/
if (typeof _$jscoverage === 'undefined') { _$jscoverage = {}; }
/* ****** end - do not edit ******/
function BranchData() {
    this.position = -1;
    this.nodeLength = -1;
    this.src = null;
    this.evalFalse = 0;
    this.evalTrue = 0;

    this.init = function(position, nodeLength, src) {
        this.position = position;
        this.nodeLength = nodeLength;
        this.src = src;
        return this;
    }

    this.ranCondition = function(result) {
        if (result)
            this.evalTrue++;
        else
            this.evalFalse++;
    };

    this.pathsCovered = function() {
        var paths = 0;
        if (this.evalTrue > 0)
          paths++;
        if (this.evalFalse > 0)
          paths++;
        return paths;
    };

    this.covered = function() {
        return this.evalTrue > 0 && this.evalFalse > 0;
    };

    this.toJSON = function() {
        return '{"position":' + this.position
            + ',"nodeLength":' + this.nodeLength
            + ',"src":' + jscoverage_quote(this.src)
            + ',"evalFalse":' + this.evalFalse
            + ',"evalTrue":' + this.evalTrue + '}';
    };

    this.message = function() {
        if (this.evalTrue === 0 && this.evalFalse === 0)
            return 'Condition never evaluated         :\t' + this.src;
        else if (this.evalTrue === 0)
            return 'Condition never evaluated to true :\t' + this.src;
        else if (this.evalFalse === 0)
            return 'Condition never evaluated to false:\t' + this.src;
        else
            return 'Condition covered';
    };
}

BranchData.fromJson = function(jsonString) {
    var json = eval('(' + jsonString + ')');
    var branchData = new BranchData();
    branchData.init(json.position, json.nodeLength, json.src);
    branchData.evalFalse = json.evalFalse;
    branchData.evalTrue = json.evalTrue;
    return branchData;
};

BranchData.fromJsonObject = function(json) {
    var branchData = new BranchData();
    branchData.init(json.position, json.nodeLength, json.src);
    branchData.evalFalse = json.evalFalse;
    branchData.evalTrue = json.evalTrue;
    return branchData;
};

function buildBranchMessage(conditions) {
    var message = 'The following was not covered:';
    for (var i = 0; i < conditions.length; i++) {
        if (conditions[i] !== undefined && conditions[i] !== null && !conditions[i].covered())
          message += '\n- '+ conditions[i].message();
    }
    return message;
};

function convertBranchDataConditionArrayToJSON(branchDataConditionArray) {
    var array = [];
    var length = branchDataConditionArray.length;
    for (var condition = 0; condition < length; condition++) {
        var branchDataObject = branchDataConditionArray[condition];
        if (branchDataObject === undefined || branchDataObject === null) {
            value = 'null';
        } else {
            value = branchDataObject.toJSON();
        }
        array.push(value);
    }
    return '[' + array.join(',') + ']';
}

function convertBranchDataLinesToJSON(branchData) {
    if (branchData === undefined) {
        return '[]'
    }
    var array = [];
    var length = branchData.length;
    for (var line = 0; line < length; line++) {
        var branchDataObject = branchData[line];
        if (branchDataObject === undefined || branchDataObject === null) {
            value = 'null';
        } else {
            value = convertBranchDataConditionArrayToJSON(branchDataObject);
        }
        array.push(value);
    }
    return '[' + array.join(',') + ']';
}

function convertBranchDataLinesFromJSON(jsonObject) {
    if (jsonObject === undefined) {
        return [];
    }
    var length = jsonObject.length;
    for (var line = 0; line < length; line++) {
        var branchDataJSON = jsonObject[line];
        if (branchDataJSON !== null) {
            for (var conditionIndex = 0; conditionIndex < branchDataJSON.length; conditionIndex ++) {
                var condition = branchDataJSON[conditionIndex];
                if (condition !== null) {
                    branchDataJSON[conditionIndex] = BranchData.fromJsonObject(condition);
                }
            }
        }
    }
    return jsonObject;
}
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
      top.opener._$jscoverage.branchData = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
      top._$jscoverage.branchData = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    this._$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (! this._$jscoverage) {
  this._$jscoverage = {};
  this._$jscoverage.branchData = {};
}
if (! _$jscoverage['iconfig.js']) {
  _$jscoverage['iconfig.js'] = [];
  _$jscoverage['iconfig.js'][6] = 0;
  _$jscoverage['iconfig.js'][12] = 0;
  _$jscoverage['iconfig.js'][13] = 0;
  _$jscoverage['iconfig.js'][15] = 0;
  _$jscoverage['iconfig.js'][16] = 0;
  _$jscoverage['iconfig.js'][17] = 0;
  _$jscoverage['iconfig.js'][18] = 0;
  _$jscoverage['iconfig.js'][19] = 0;
  _$jscoverage['iconfig.js'][22] = 0;
  _$jscoverage['iconfig.js'][23] = 0;
  _$jscoverage['iconfig.js'][25] = 0;
  _$jscoverage['iconfig.js'][27] = 0;
  _$jscoverage['iconfig.js'][28] = 0;
  _$jscoverage['iconfig.js'][29] = 0;
  _$jscoverage['iconfig.js'][31] = 0;
  _$jscoverage['iconfig.js'][34] = 0;
  _$jscoverage['iconfig.js'][39] = 0;
  _$jscoverage['iconfig.js'][40] = 0;
  _$jscoverage['iconfig.js'][41] = 0;
  _$jscoverage['iconfig.js'][42] = 0;
  _$jscoverage['iconfig.js'][43] = 0;
  _$jscoverage['iconfig.js'][48] = 0;
  _$jscoverage['iconfig.js'][49] = 0;
  _$jscoverage['iconfig.js'][50] = 0;
  _$jscoverage['iconfig.js'][51] = 0;
  _$jscoverage['iconfig.js'][52] = 0;
  _$jscoverage['iconfig.js'][53] = 0;
  _$jscoverage['iconfig.js'][55] = 0;
  _$jscoverage['iconfig.js'][56] = 0;
  _$jscoverage['iconfig.js'][57] = 0;
  _$jscoverage['iconfig.js'][60] = 0;
  _$jscoverage['iconfig.js'][61] = 0;
  _$jscoverage['iconfig.js'][66] = 0;
  _$jscoverage['iconfig.js'][67] = 0;
  _$jscoverage['iconfig.js'][71] = 0;
  _$jscoverage['iconfig.js'][72] = 0;
  _$jscoverage['iconfig.js'][73] = 0;
  _$jscoverage['iconfig.js'][77] = 0;
  _$jscoverage['iconfig.js'][78] = 0;
}
_$jscoverage['iconfig.js'].source = ["/*!"," * response-patch - lib/iconfig.test.js"," * Author: jifeng &lt;wade428@163.com&gt;"," */","","\"use strict\";","","/**"," * Module dependencies."," */","","var iservice = require('iservice-client');","var clone = require('clone');","","var config = {};","var _configFromIservice = {};","var _ready = false;","var client = {};","var backup = {};","","","function defineItem(key) {","  Object.defineProperty(config, key, {","    get: function () {","      var value = _configFromIservice[key];","      //&#22240;&#20026;value&#30340;&#20540;&#21487;&#33021;&#26159;false,&#25152;&#20197;&#19981;&#29992;!value","      if (value === undefined) {","        console.log('could not fetch ' + key + ' of config from iservice');","        value = backup[key];","      }","      return value;","    },","    set: function (val) {","      backup[key] = val;","    }","  });","}","","function defineConfig() {","  _configFromIservice = client.getTree();","  for (var key in _configFromIservice) {","    if (backup[key] !== undefined) {","      defineItem(key);  ","    }","  }","}","","module.exports = function (options) {","  config = options.config;","  var appname = options.appname;","  iservice.init(options.iservice);","  client = iservice.createConfig(appname);","  backup = clone(config);","  ","  client.ready = function (callback) {","    if (_ready) {","      return process.nextTick(callback);","    }","    //&#25968;&#25454;&#24050;&#32463;&#21040;&#20301;&#65292;&#26080;&#35770;&#26159;&#20174;zk&#20013;&#24471;&#21040;&#36824;&#26159;&#32531;&#23384;&#20013;&#24471;&#21040;","    client.on('ready', function () {","      return process.nextTick(callback);","    });","  };","","  //&#24403;iservice&#30340;&#37197;&#32622;&#21457;&#29983;&#25913;&#21464;","  client.on('change', function () {","    defineConfig();","  });","","  //iservice&#24050;&#27491;&#24120;&#21551;&#21160;","  client.on('ready', function () {","    defineConfig();","    _ready = true;","  });","","  //iservice&#20986;&#29616;&#38169;&#35823;","  client.on('error', function (err) {});","  return client;","};","","","","","",""];
_$jscoverage['iconfig.js'][6]++;
"use strict";
_$jscoverage['iconfig.js'][12]++;
var iservice = require('iservice-client');
_$jscoverage['iconfig.js'][13]++;
var clone = require('clone');
_$jscoverage['iconfig.js'][15]++;
var config = {};
_$jscoverage['iconfig.js'][16]++;
var _configFromIservice = {};
_$jscoverage['iconfig.js'][17]++;
var _ready = false;
_$jscoverage['iconfig.js'][18]++;
var client = {};
_$jscoverage['iconfig.js'][19]++;
var backup = {};
_$jscoverage['iconfig.js'][22]++;
function defineItem(key) {
  _$jscoverage['iconfig.js'][23]++;
  Object.defineProperty(config, key, {
  get: function() {
  _$jscoverage['iconfig.js'][25]++;
  var value = _configFromIservice[key];
  _$jscoverage['iconfig.js'][27]++;
  if (value === undefined) {
    _$jscoverage['iconfig.js'][28]++;
    console.log('could not fetch ' + key + ' of config from iservice');
    _$jscoverage['iconfig.js'][29]++;
    value = backup[key];
  }
  _$jscoverage['iconfig.js'][31]++;
  return value;
}, 
  set: function(val) {
  _$jscoverage['iconfig.js'][34]++;
  backup[key] = val;
}});
}
_$jscoverage['iconfig.js'][39]++;
function defineConfig() {
  _$jscoverage['iconfig.js'][40]++;
  _configFromIservice = client.getTree();
  _$jscoverage['iconfig.js'][41]++;
  for (var key in _configFromIservice) {
    _$jscoverage['iconfig.js'][42]++;
    if (backup[key] !== undefined) {
      _$jscoverage['iconfig.js'][43]++;
      defineItem(key);
    }
  }
}
_$jscoverage['iconfig.js'][48]++;
module.exports = function(options) {
  _$jscoverage['iconfig.js'][49]++;
  config = options.config;
  _$jscoverage['iconfig.js'][50]++;
  var appname = options.appname;
  _$jscoverage['iconfig.js'][51]++;
  iservice.init(options.iservice);
  _$jscoverage['iconfig.js'][52]++;
  client = iservice.createConfig(appname);
  _$jscoverage['iconfig.js'][53]++;
  backup = clone(config);
  _$jscoverage['iconfig.js'][55]++;
  client.ready = function(callback) {
  _$jscoverage['iconfig.js'][56]++;
  if (_ready) {
    _$jscoverage['iconfig.js'][57]++;
    return process.nextTick(callback);
  }
  _$jscoverage['iconfig.js'][60]++;
  client.on('ready', function() {
  _$jscoverage['iconfig.js'][61]++;
  return process.nextTick(callback);
});
};
  _$jscoverage['iconfig.js'][66]++;
  client.on('change', function() {
  _$jscoverage['iconfig.js'][67]++;
  defineConfig();
});
  _$jscoverage['iconfig.js'][71]++;
  client.on('ready', function() {
  _$jscoverage['iconfig.js'][72]++;
  defineConfig();
  _$jscoverage['iconfig.js'][73]++;
  _ready = true;
});
  _$jscoverage['iconfig.js'][77]++;
  client.on('error', function(err) {
});
  _$jscoverage['iconfig.js'][78]++;
  return client;
};
