/* vim: set expandtab tabstop=2 shiftwidth=2 foldmethod=marker: */

var should  = require('should');
var config  = require(__dirname + '/../lib/config.js');
var Tool    = require(__dirname + '/../lib/tool.js');

var _storer = function (data) {

  var _me   = {};
  _me.get   = function (key, callback) {
    key = key.replace(/\/{2,}/g, '/');
    if (key.indexOf('error') > -1) {
      return null;
    } else {
      return {
        data : data[key],
        meta : 'fake meta'
      };
    }
  };

  _me.watch = function (key, syncTime, timeout, callback) {
    setTimeout(function () {
      callback(key.indexOf('watcherror') > -1 ? new Error('WatchError') : null, Date.now());
    }, timeout || 10);
  };

  _me.sync = function (prefix, callback) {
    callback(prefix.indexOf('syncerror') > -1 ? new Error('SyncError') : null);
  };

  _me.getTree = function (key) {
    var tree = {};
    key = Tool.normalize(key);
    for (var i in data) {
      var exp = new RegExp('^' + key);
      if (exp.test(i)) {
        tree[i] = {
          data : data[i],
          meta : ''
        };
      }
    }
    return tree;
  }

  return _me;
};

describe('config interface', function () {

  /* {{{ should_config_get_value_works_fine() */
  it('should_config_get_value_works_fine', function (done) {

    var num = 5;
    var cfg = {
      'timeout' : 10,
    };

    var _me = config.create('/app1/app2/', cfg, _storer({
      '/config/app1/app2/key1' : 'AbCd1我asd',
      '/config/app1/app2/key2' : JSON.stringify({
        type : 'string',
        content : '-123.3123'
      }),
      '/config/app1/app2/key3' : JSON.stringify({
        type : 'number',
        content : 123.4
      }),
      '/config/app1/app2/key4' : JSON.stringify({
        type : 'boolean',
        content : false
      }),
    }));

    _me.setEventHandle('change', function (rev) {
      should.ok(rev);
      if ((--num) === 0) {
        done();
      }
    });

    var data = _me.get('key1');
    data.should.eql('AbCd1我asd');

    data = _me.get('key2');
    data.should.eql('-123.3123');

    data = _me.get('key3');
    data.should.eql(123.4);

    data = _me.get('key4');
    data.should.eql(false);

    data = _me.get('error');
    should.ok(!data);
    done();
  });
  /* }}} */

  /* {{{ should_config_getTree_works_fine() */
  it('should_config_getTree_works_fine', function (done) {

    var num = 5;
    var cfg = {
      'timeout' : 10,
    };

    var _me = config.create('/app1/app2/', cfg, _storer({
      '/config/app1/app2/key1' : 'AbCd1我asd',
      '/config/app1/app2/folder1/key1' : JSON.stringify({
        type : 'string',
        content : '-123.3123'
      }),
      '/config/app1/app2/folder1/key2' : JSON.stringify({
        type : 'number',
        content : 123.4
      }),
      '/config/app1/app2/folder1/folder11/key1' : JSON.stringify({
        type : 'number',
        content : 234.5
      }),
    }));

    _me.setEventHandle('change', function (rev) {
      should.ok(rev);
      if ((--num) === 0) {
        done();
      }
    });

    var data = _me.getTree('folder1');
    data.should.eql({ 
      key1: "-123.3123",
      key2: 123.4,
      folder11: { 
        key1: 234.5 
      } 
    });

    done();
  });
  /* }}} */

  /* {{{ should_config_set_event_handle_works_fine() */
  it('should_config_set_event_handle_works_fine', function (done) {
    var _me = config.create('/syncerror', {'timeout' : 5}, _storer({}));
    _me.setEventHandle('error', function (error) {
      error.toString().should.include('SyncError');
      var _me = config.create('/watcherror', {'timeout' : 5}, _storer({}));
      _me.setEventHandle('error', function (error) {
        error.toString().should.include('WatchError');
        done();
      });
    });
  });
  /* }}} */

});

